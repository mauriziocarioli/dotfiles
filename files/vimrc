" Vim

"Use pathogen to load plugins in '~/.vim/bundles'
runtime bundle/pathogen/autoload/pathogen.vim
execute pathogen#infect()
filetype plugin indent on
syntax enable

set incsearch
set laststatus=2
set tabstop=4
set shiftwidth=4
set softtabstop=0
set noexpandtab
let &showbreak = '+++ '
set nocompatible        " Use Vim defaults (much better!)
set t_Co=16
set bs=2                " allow backspacing over everything in insert mode
set backup              " keep a backup file
set showcmd
set whichwrap=b,s,<,>,[,]
set printoptions=paper:letter
"set listchars=tab:>-,trail:-
set listchars=tab:‚ù±‚ñ∂,trail:‚óÄ
set list
" The next two allow italics
set t_ZH=[3m
set t_ZR=[23m

autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow

autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

let mapleader       = ',' " Use , as leader.


" Convert each <TAB> in a selection to 4 <SPACE>s.
map ,ts :s/\t/    /g<CR>:noh<CR>

function! ComputeVer(verstring)
	"  exe "let g:" . a:verstring . " = ". v:version/ 100
	let g:verstring = v:version/100
	let g:verstring = g:verstring.".".(v:version - g:verstring*100)
endfunction


command! DiffOrig new|set bt=nofile|r #|0d_|diffthis|wincmd p|diffthis

" If buffer modified, update any 'Last modified: ' in the first 20 lines.
" " 'Last modified: Tue May 26, 2009  06:44PM
" " Restores position using s mark.
function! LastModified()
	if &modified
		normal ms
		let n = min([20, line("$")])
		exe '1,' . n . 's#^\(.\{,10}Last modified: \).*#\1' .
		\ strftime('%c') . '#e'
		normal `s
	endif
endfun
autocmd BufWritePre * call LastModified()

"
" We must be able to show the 80 column limit with F8.
" Hitting F8 again will toggle back to normal.
"
function! Column80 ()
	if exists('+colorcolumn')
		" Show column 80
		if &colorcolumn == ""
			set colorcolumn=80
		else
			set colorcolumn=
		endif
	endif
endfunction

"
" Custom keymaps
"
" Switch between splits with Ctrl-h, Ctrl-j, Ctrl-k, and Ctrl-l
"  Normal and Visual+Select modes
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

noremap [l :lnext<CR>
noremap ]l :lprev<CR>

" set # to toggle line numbers on and off:
map # :set invnumber<CR>


" maps highlighting column 80 to <F8>
noremap  <silent> <F8> :call Column80()<CR>
noremap! <silent> <F8> <ESC> :call Column80()<CR>

" Add spelling to completion: CTRL-N will include spelling completion when
" spell is active. Use CTRL-N and CTRL-P to navigate list.
set complete+=kspell
" Go to next misspelled word
map <F2> ]s
" Suggestions for misspelled word
map <F3> z=


" Resize current window to 80 width
noremap  <silent> w80 :vertical resize 80

execute "set <M-H>=\eH"
execute "set <M-J>=\eJ"
execute "set <M-K>=\eK"
execute "set <M-L>=\eL"

" Increase/Decrease horizontally split window
map <M-K>  <C-W>+
map <M-J>  <C-W>-
" Increase/Decrease vertically split window
map <M-H>  <C-W><
map <M-L> <C-W>>

"
" Manpage for word under cursor via 'K' in command mode
"
runtime! ftplugin/man.vim

" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
" The next few lines are from http://vim.wikia.com titled:
" Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
set completeopt=menuone,longest,preview
set pumheight=7
set splitbelow

function! UnicodeShortCutsSetup ()
	" Greek {{{1
	map! <C-v>GA Œì
	map! <C-v>DE Œî
	map! <C-v>TH Œò
	map! <C-v>LA Œõ
	map! <C-v>XI Œû
	map! <C-v>PI Œ†
	map! <C-v>SI Œ£
	map! <C-v>PH Œ¶
	map! <C-v>PS Œ®
	map! <C-v>OM Œ©
	map! <C-v>al Œ±
	map! <C-v>be Œ≤
	map! <C-v>ga Œ≥
	map! <C-v>de Œ¥
	map! <C-v>ep Œµ
	map! <C-v>ze Œ∂
	map! <C-v>et Œ∑
	map! <C-v>th Œ∏
	map! <C-v>io Œπ
	map! <C-v>ka Œ∫
	map! <C-v>la Œª
	map! <C-v>mu Œº
	map! <C-v>nu ŒΩ
	map! <C-v>xi Œæ
	map! <C-v>pi œÄ
	map! <C-v>rh œÅ
	map! <C-v>si œÉ
	map! <C-v>ta œÑ
	map! <C-v>ph œï
	map! <C-v>ch œá
	map! <C-v>ps œà
	map! <C-v>om œâ
	" Math {{{1
	map! <C-v>s1 ‚ÇÅ
	map! <C-v>s2 ‚ÇÇ
	map! <C-v>s3 ‚ÇÉ
	map! <C-v>s4 ‚ÇÑ
	map! <C-v>s- ‚Çã
	map! <C-v>s+ ‚Çä
	map! <C-v>s( ‚Çç
	map! <C-v>s) ‚Çé

	map! <C-v>S1 ¬π
	map! <C-v>S2 ¬≤
	map! <C-v>S3 ¬≥
	map! <C-v>S4 ‚Å¥
	map! <C-v>S- ‚Åª
	map! <C-v>S+ ‚Å∫
	map! <C-v>S( ‚ÅΩ
	map! <C-v>S) ‚Åæ

	map! <C-v>Mx x
	map! <C-v>Mp ¬±

	map! <C-v>ll ‚Üí
	map! <C-v>hh ‚áå
	map! <C-v>kk ‚Üë
	map! <C-v>jj ‚Üì
	map! <C-v>= ‚àù
	map! <C-v>~ ‚âà
	map! <C-v>!= ‚â†
	map! <C-v>!> ‚á∏
	map! <C-v>~> ‚Üù
	map! <C-v>>= ‚â•
	map! <C-v><= ‚â§
	map! <C-v>0  ¬∞
	map! <C-v>ce ¬¢
	map! <C-v>*  ‚Ä¢
	map! <C-v>ck ‚úî
endfunction

"
" NERD Commenter
"
function! NERDCommenterSetup ()
	let g:NERDShutUp      = 1   " Don't warn on unsupported filetype
	let g:NERDSpaceDelims = 1   " Put a space between comment delimiter and text
endfunction

"
" NERD Tree
"
function! NERDTreeSetup ()
	" maps NERDTree to F9 (normal, visual and operator-pending modes)
	noremap <silent> <F9> :NERDTreeToggle<CR>:vert resize 25<CR>

	" (also in insert and command-line modes)
	noremap! <silent> <F9> <ESC>:NERDTreeToggle<CR>:vert resize 25<CR>
endfunction

"
" Tagbar
"
function! TagbarSetup ()
	" maps Tagbar to F10
	noremap <silent> <F10> :TagbarToggle<CR>
	noremap! <silent> <F10> <ESC>:TagbarToggle<CR>
endfunction
"
" For plugin/ctab.vim
"
function! CtabSetup ()
	let g:ctab_filetype_maps=1
	let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']
	let g:SuperTabDefaultCompletionType = 'context'
endfunction

"
" vim-airline settings
"
function! AirlineSetup ()
	let g:airline#extensions#whitespace#checks = [ 'indent', 'trailing' ]
	let g:airline#extensions#whitespace#mixed_indent_algo = 2
	let g:airline#extensions#tabline#enabled = 1

	if !exists('g:airline_symbols')
		let g:airline_symbols = {}
	endif

	" Set to zero if not using a powerline patched font
	let g:airline_powerline_fonts = 1

	if g:airline_powerline_fonts == 0
		let g:airline_left_sep = '‚é¨'
		let g:airline_right_sep = '‚é®'
		let g:airline_symbols.crypt = 'c'
		let g:airline_symbols.linenr = ''
		let g:airline_symbols.branch = 'Œ≤'
		let g:airline_symbols.paste = '‚à•'
		let g:airline_symbols.whitespace = 'Œû'

		let g:airline#extensions#tabline#left_sep = '‚é¨'
		let g:airline#extensions#tabline#left_alt_sep = '‚é®'
	endif

	let g:airline_symbols.maxlinenr = ''

	" shortform text
	let g:airline_mode_map = {
	  \ '__' : '-',
	  \ 'n'  : 'N',
	  \ 'i'  : 'I',
	  \ 'R'  : 'R',
	  \ 'c'  : 'C',
	  \ 'v'  : 'V',
	  \ 'V'  : 'V',
	  \ '' : 'V',
	  \ 's'  : 'S',
	  \ 'S'  : 'S',
	  \ '' : 'S',
	  \ }
endfunction

"
" easymotion
"
function! EasyMotionSetup ()
	let g:EasyMotion_do_mapping = 0 " Disable default mappings

	" Jump to anywhere you want with minimal keystrokes, with just one key
	" binding.  `s{char}{label}`
	nmap s <Plug>(easymotion-overwin-f)
	" or
	" `s{char}{char}{label}`
	" Need one more keystroke, but on average, it may be more comfortable.
	"nmap s <Plug>(easymotion-overwin-f2)

	" Turn on case insensitive feature
	let g:EasyMotion_smartcase = 1

	" JK motions: Line motions
	map <Leader>j <Plug>(easymotion-j)
	map <Leader>k <Plug>(easymotion-k)
endfunction

"
" solarized scheme
"
function! SolarizedSetup ()
	let g:solarized_visibility="low"
	" This looks good in solarized-dark color scheme.
	let g:airline_solarized_dark_inactive_border=1
	" This looks good in solarized-light color scheme.
	let g:airline_solarized_dark_inactive_border=0
	colorscheme solarized
endfunction

"
" Syntastic
"
function! SyntasticSetup ()
	set statusline+=%#warningmsg#
	set statusline+=%{SyntasticStatuslineFlag()}
	set statusline+=%*

	let g:syntastic_always_populate_loc_list = 1
	let g:syntastic_auto_loc_list = 1
	let g:syntastic_check_on_open = 0
	let g:syntastic_check_on_wq = 0
	let g:tsuquyomi_disable_quickfix = 1
	let g:syntastic_typescript_checkers = ['tsuquyomi']
	let g:syntastic_go_checkers = ['gofmt']
	let g:syntastic_tex_checkers = ['']
	" let g:syntastic_cpp_compiler=system('mpicxx --showme:compiler')
	let g:syntastic_cpp_check_header = 1
	let g:syntastic_quiet_messages = {
				\ "regex": ['\m^fatal error: TraceHBondsConfig.h: No such file or directory$'] }
endfunction

call SolarizedSetup()
call UnicodeShortCutsSetup()
call NERDCommenterSetup()
call NERDTreeSetup()
call TagbarSetup()
call CtabSetup()
call AirlineSetup()
call EasyMotionSetup()
call SyntasticSetup()

" Set where to save swap files. The default is the same directory as the
" file being edited.
if ( !exists("$XDG_CACHE_HOME") )
	set directory=$HOME/.cache/vim-swap//
else
	set directory=$XDG_CACHE_HOME/vim-swap//
endif

if !isdirectory(&directory) | call mkdir(&directory, 'p', 0700) | endif

set rtp+=~/.bash.d/github.com/fzf

" vim-latex settings
set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'
" end: vim-latex settings

" vim:tw=76:ts=4:sw=4

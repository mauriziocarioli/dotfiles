#!/bin/bash
#
# Generate an html or pdf file from a markdown file using pandoc, and view it
# using the chrome browser. I have this script mapped to F4 when editing a
# markdown file in vim.
#
# Usage:
# mdv <input markdown file> <output html file>
#
# For html:
# Uses 'before.html' and 'after.html' in your personal configuration directory
# ($ MyPersonalConfigs -d mdv). These two files may be empty if you don't want
# extra formatting to the html.
#
# For pdf:
# Uses 'header.tex' in your personal configuration directory ($
# MyPersonalConfigs -d mdv). This file may be empty if you don't want extra
# formatting to the pdf.
#
# Based on ideas from https://github.com/JamshedVesuna/vim-markdown-preview,
# but I wanted something simple that could be run from the command line too.
#
# Author: Brian G. Olson (https://www.github.com/olsonbg)
#
# Current version:
#     https://github.com/olsonbg/dotfiles/blob/master/bin/mdv
#
# Released under GPLv3 (http://www.gnu.org/licenses/gpl.html)
#

# Check for required programs.
MyRequiredProgs pandoc xdotool || exit 1

if [[ $2 = *.html ]]; then
	# Get location of 'before.html' and 'after.html' files.
	BEFORE=$(MyPersonalConfigs -d mdv -c -f before.html) || exit 1
	AFTER=$(MyPersonalConfigs  -d mdv -c -f after.html)  || exit 1
elif [[ $2 = *.pdf ]]; then
	# Get location of 'header.tex' file.
	HEADER=$(MyPersonalConfigs  -d mdv -c -f header.tex)  || exit 1
fi

if [ $# -ne 2 ]; then
	echo "Usage: $(basename "$0") <input markdown file> <output html or pdf file>"
	exit 1
fi

if [[ $2 = *.html ]]; then
	# Generate the html. For LaTeX equations, use mathjax.
	pandoc -B "$BEFORE" -A "$AFTER" --mathjax -o "$2" "$1"

	TITLE=$(awk -vRS="</title>" '/<title>/{gsub(/.*<title>|\n+/,"");print;exit}' "$2")

elif [[ $2 = *.pdf ]]; then
	# Generate the pdf.
	pandoc --listings -H "$HEADER" -V geometry:margin=1in -o "$2" "$1"
	TITLE="$(pdfinfo "$2" | sed -n 's/Title: *//p')"
else
	# If not html or pdf, just try anyway.
	pandoc -o "$2" "$1"
fi

if [ -z "$TITLE" ]; then
	TITLE="$(basename "$2")"
fi

TAB="$TITLE - Google Chrome"

# Is a tab of this file currently active?
WINDOWID=$(xdotool search --name "$TAB" 2>/dev/null)

if [ $? != 0 ]; then
	google-chrome-stable "$2" 2>/dev/null >/dev/null &
	# Wait for the window to show, then activate it.
	xdotool search --sync --name "$TAB" windowactivate 2>/dev/null
else
	# Reload browser tab if current tab is <output html file>
	xdotool windowactivate --sync "$WINDOWID" key 'ctrl+r' 2>/dev/null
fi

